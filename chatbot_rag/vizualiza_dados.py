import pandas as pd

# Coloque o nome exato do seu arquivo aqui
nome_do_arquivo = r'train.gz' 

print(f"Tentando ler o arquivo '{nome_do_arquivo}'...")

try:
    # O pandas detecta a compress√£o .gz e l√™ o arquivo CSV diretamente
    # O par√¢metro 'error_bad_lines=False' pode ser √∫til se algumas linhas estiverem corrompidas
    # O 'warn_bad_lines=True' ir√° avis√°-lo sobre linhas com problemas.
    # Em vers√µes mais recentes do pandas, esses par√¢metros foram substitu√≠dos por on_bad_lines='skip' ou 'warn'.
    # Vamos usar um try-except para compatibilidade.
    
    try:
        df = pd.read_csv(nome_do_arquivo, compression='gzip', sep=',')
    except Exception:
        # Tenta a sintaxe mais nova se a antiga falhar
        df = pd.read_csv(nome_do_arquivo, compression='gzip', sep=',', on_bad_lines='warn')

    print("\n‚úÖ Arquivo lido com sucesso! Aqui est√£o as primeiras 5 linhas:")
    # .head() mostra as primeiras linhas de forma organizada
    print(df.head())

    print("\n----------------------------------------------------------")
    print("\nüßæ Informa√ß√µes Gerais sobre o DataFrame (colunas, tipos, etc.):")
    # .info() d√° um resumo excelente das colunas, contagem de nulos e tipos de dados
    df.info(verbose=True, show_counts=True)
    
    print("\n----------------------------------------------------------")
    print(f"\nüìÑ O DataFrame tem {df.shape[0]} linhas e {df.shape[1]} colunas.")


except FileNotFoundError:
    print(f"‚ùå ERRO: O arquivo '{nome_do_arquivo}' n√£o foi encontrado no mesmo diret√≥rio do script.")
except Exception as e:
    print(f"‚ùå ERRO ao tentar ler o arquivo: {e}")
    print("Dica: Verifique se o separador √© mesmo uma v√≠rgula (sep=','). Se for ponto e v√≠rgula, troque para sep=';'.")